<!-- Registration.vue -->
<template>
  <v-container class="py-8">
    <v-row class="mb-6">
      <v-col cols="12">
        <div class="d-flex align-center justify-space-between mb-6">
          <v-btn
            color="primary"
            variant="outlined"
            prepend-icon="mdi-arrow-left"
            @click="$router.push('/')"
            size="large"
          >
            Back to Home
          </v-btn>
        </div>
        
        <div class="text-center mb-8">
          <h1 class="text-h2 font-weight-bold text-primary mb-2">Conference Registration</h1>
          <p class="text-h6 text-grey-darken-1">Join us for an exceptional conference experience</p>
          <v-divider class="mx-auto mt-4" style="max-width: 200px;"></v-divider>
        </div>
      </v-col>
    </v-row>

    <v-row>
      <v-col cols="12">
        <v-card elevation="4" class="rounded-lg">
          <v-card-title class="bg-grey-lighten-4 pa-6">
            <v-icon class="me-3 text-primary">mdi-account-edit</v-icon>
            <span class="text-h4 font-weight-medium">Registration Form</span>
          </v-card-title>
          
          <v-card-text class="pa-8">
            <v-progress-linear
              v-if="isCheckingApi"
              indeterminate
              color="primary"
              class="mb-6"
              height="6"
            />
            
            <v-alert
              v-else-if="!isApiAvailable"
              type="error"
              class="mb-6"
              prominent
              border="start"
              icon="mdi-alert-circle"
            >
              <v-alert-title>Service Unavailable</v-alert-title>
              Registration is currently unavailable. Please try again later or contact support.
            </v-alert>

            <v-form ref="form" v-model="valid" :class="{ 'form-disabled': !isApiAvailable || isCheckingApi }">
              <div class="mb-8">
                <h3 class="text-h5 text-primary mb-4 d-flex align-center">
                  <v-icon class="me-2">mdi-account</v-icon>
                  Personal Information
                </h3>
                <v-divider class="mb-6"></v-divider>
                
                <v-row>
                  <v-col cols="12" md="6">
                    <v-text-field
                      v-model="formData.first_name" label="First Name"
                      required
                      :rules="nameRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-account"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-text-field
                      v-model="formData.last_name" label="Last Name"
                      required
                      :rules="nameRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-account"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-text-field
                      v-model="formData.email"
                      label="Email Address"
                      type="email"
                      required
                      :rules="emailRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-email"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-text-field
                      v-model="formData.phone_number" label="Phone Number"
                      required
                      :rules="phoneRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-phone"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-text-field
                      v-model="formData.affiliation"
                      label="Affiliation/Institution"
                      required
                      :rules="nameRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-office-building"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-select
                      v-model="formData.country"
                      :items="countryOptions"
                      label="Country"
                      required
                      :rules="nameRules"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-earth"
                      class="mb-2"
                    />
                  </v-col>
                </v-row>
              </div>

              <div class="mb-8">
                <h3 class="text-h5 text-primary mb-4 d-flex align-center">
                  <v-icon class="me-2">mdi-ticket</v-icon>
                  Registration Details
                </h3>
                <v-divider class="mb-6"></v-divider>
                
                <v-row>
                  <v-col cols="12" md="6">
                    <v-select
                      v-model="formData.category"
                      :items="categories"
                      label="Registration Category"
                      required
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-tag"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-select
                      v-model="formData.fee_type" :items="feeTypes"
                      label="Fee Type"
                      required
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-currency-usd"
                      class="mb-2"
                    />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-select
                      v-model="formData.excursion_networking" :items="excursionOptions"
                      label="Excursion/Networking Tour"
                      required
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-map-marker"
                      class="mb-2"
                    />
                  </v-col>
                </v-row>
              </div>

              <div class="mb-8">
                <h3 class="text-h5 text-primary mb-4 d-flex align-center">
                  <v-icon class="me-2">mdi-presentation</v-icon>
                  Presentation Information
                </h3>
                <v-divider class="mb-6"></v-divider>
                
                <v-row>
                  <v-col cols="12">
                    <v-text-field
                      v-if="formData.fee_type === 'Local Participant (Presenter)' || formData.fee_type === 'International Participant (Presenter)'"
                      v-model="formData.presentation_title" label="Presentation Title"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-microphone"
                      hint="Enter your presentation title"
                      persistent-hint
                      class="mb-2"
                    />
                    
                    <v-text-field
                      v-else
                      value="You're not presenting, please leave this field empty"
                      label="Presentation Title"
                      readonly
                      variant="outlined"
                      prepend-inner-icon="mdi-microphone"
                      class="mb-2"
                      color="orange"
                      :style="{ '--v-field-input-color': '#ff9800' }"
                    />
                  </v-col>
                  
                  <v-col cols="12">
                    <v-select
                      v-if="formData.fee_type === 'Local Participant (Presenter)' || formData.fee_type === 'International Participant (Presenter)'"
                      v-model="formData.presentation_type" :items="['Oral', 'Poster']"
                      label="Type of Presentation"
                      required
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-presentation-play"
                      class="mb-2"
                    />
                    
                    <v-text-field
                      v-else
                      value="You're not presenting, please leave this field empty"
                      label="Type of Presentation"
                      readonly
                      variant="outlined"
                      prepend-inner-icon="mdi-presentation-play"
                      class="mb-2"
                      color="orange"
                      :style="{ '--v-field-input-color': '#ff9800' }"
                    />
                  </v-col>
                </v-row>
              </div>

              <div class="mb-8">
                <h3 class="text-h5 text-primary mb-4 d-flex align-center">
                  <v-icon class="me-2">mdi-file-upload</v-icon>
                  Document Uploads
                </h3>
                <v-divider class="mb-6"></v-divider>
                
                <v-row>
                  <v-col cols="12" md="6">
                    <v-file-input
                      v-model="formData.uploaded_papers" label="Upload Paper/Journal"
                      accept=".pdf,.doc,.docx" prepend-icon="mdi-file-pdf-box"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      hint="PDF, DOC, DOCX formats only (Max 10MB)"
                      persistent-hint
                      class="mb-2"
                      show-size
                      :rules="paperFileRules" />
                  </v-col>
                  <v-col cols="12" md="6">
                    <v-file-input
                      v-model="formData.supporting_documents" label="Supporting Documents"
                      accept=".zip,.pdf,.doc,.docx,.jpg,.jpeg,.png" prepend-icon="mdi-file-multiple"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      multiple
                      hint="ZIP, PDF, DOC, DOCX, JPG, JPEG, PNG formats (Max 5MB per file)"
                      persistent-hint
                      class="mb-2"
                      show-size
                      :rules="supportingDocsRules" />
                  </v-col>
                </v-row>
              </div>

              <div class="mb-6">
                <h3 class="text-h5 text-primary mb-4 d-flex align-center">
                  <v-icon class="me-2">mdi-information</v-icon>
                  Additional Information
                </h3>
                <v-divider class="mb-6"></v-divider>
                
                <v-row>
                  <v-col cols="12">
                    <v-textarea
                      v-model="formData.special_requirements" label="Special Requirements"
                      rows="4"
                      :disabled="!isApiAvailable || isCheckingApi"
                      variant="outlined"
                      prepend-inner-icon="mdi-note-text"
                      hint="Please specify any accessibility needs or other special requirements"
                      persistent-hint
                      no-resize
                    />
                  </v-col>
                </v-row>
              </div>
            </v-form>
          </v-card-text>
          
          <v-card-actions class="pa-8 pt-0">
            <v-spacer></v-spacer>
            <v-btn
              color="primary"
              size="x-large"
              :disabled="!valid || !isApiAvailable || isCheckingApi"
              :loading="isSubmitting" @click="submitForm"
              prepend-icon="mdi-send"
              class="px-8"
              elevation="2"
            >
              Submit Registration
            </v-btn>
          </v-card-actions>
        </v-card>
      </v-col>
    </v-row>

    <v-row class="mt-8">
      <v-col cols="12">
        <v-alert
          type="info"
          variant="tonal"
          border="start"
          class="text-center"
        >
          <v-icon class="me-2">mdi-information</v-icon>
          All fields marked as required must be completed. You will receive a confirmation email after successful registration.
        </v-alert>
      </v-col>
    </v-row>
  </v-container>
</template>

<script setup lang="ts">
import { ref, onMounted, onUnmounted } from 'vue'
import { getCountryNames } from './Country_Data' // Assuming this file exists and exports correctly

// --- INTERFACES ---

// Updated FormData interface to match database/Registration interface property names
interface FormData {
  first_name: string; // Changed
  last_name: string;  // Changed
  email: string;
  phone_number: string; // Changed
  affiliation: string;
  country: string;
  category: string;
  fee_type: string; // Changed
  presentation_type: string; // Changed
  excursion_networking: string; // Changed
  presentation_title: string; // Changed
  uploaded_papers: File[] | null; // This will hold the File objects from the input
  supporting_documents: File[]; // This will hold the File objects from the input
  special_requirements: string; // Changed
}

interface VForm {
  reset: () => void;
  validate: () => Promise<{ valid: boolean }>;
  resetValidation: () => void;
}

// --- REFS & INITIAL DATA ---
const valid = ref(false);
const form = ref<VForm | null>(null);
const isSubmitting = ref(false); // New state for submit button loading

const countryOptions = getCountryNames(); // Populate country dropdown

// Initialize formData with keys matching the Registration interface
const formData = ref<FormData>({
  first_name: '',
  last_name: '',
  email: '',
  phone_number: '',
  affiliation: '',
  country: '',
  category: '',
  fee_type: '',
  presentation_type: '',
  excursion_networking: '',
  presentation_title: '',
  uploaded_papers: null, // Single file input usually returns an array of 1 File
  supporting_documents: [],
  special_requirements: ''
});

// Options for dropdowns
const categories = [
  'Student',
  'Academic',
  'Industry'
];
const feeTypes = [
  'Local Participant (Presenter)',
  'Local Participant (Non-Presenter)',
  'International Participant (Presenter)',
  'International Participant (Non-Presenter)'
];
const excursionOptions = [
  'None',
  'Local Excursion/Networking Tour',
  'International Excursion/Networking Tour'
];

// --- VALIDATION RULES ---
const emailRules = [
  (v: string) => !!v || 'Email is required',
  (v: string) => /.+@.+\..+/.test(v) || 'Email must be valid'
];
const nameRules = [
  (v: string) => !!v || 'This field is required'
];
const phoneRules = [
  (v: string) => !!v || 'Phone number is required',
  (v: string) => /^\+?\d{7,15}$/.test(v) || 'Enter a valid phone number'
];

const paperFileRules = [
    (v: File[] | null) => {
        // v can be null, undefined, or an empty array [] or an array with File objects.
        // For single file inputs, it's often [File] or [] or null.
        if (!v || v.length === 0) {
            // If no file is selected, it's valid as per "optional field" comment.
            return true;
        }

        const file = v[0];

        // IMPORTANT: Add a check if 'file' itself is undefined after trying to access v[0]
        if (!file) {
            return 'File not found or invalid selection.'; // Or just return true if it's considered optional
        }

        const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
        const maxFileSize = 10 * 1024 * 1024; // 10MB

        // Check file type using MIME type and also fallback to extension
        const fileExtension = file.name.split('.').pop()?.toLowerCase() || '';

        if (!allowedTypes.includes(file.type) && !['doc', 'docx', 'pdf'].includes(fileExtension)) {
            return 'Only PDF, DOC, and DOCX files are allowed.';
        }
        if (file.size > maxFileSize) {
            return `File size should be less than ${maxFileSize / (1024 * 1024)}MB.`;
        }
        return true;
    }
];

const supportingDocsRules = [
  (v: File[]) => {
    if (!v || v.length === 0) return true; // Optional field
    const allowedTypes = [
      'application/zip', 'application/pdf', 'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'image/jpeg', 'image/png', 'image/jpg' // Add image MIME types
    ];
    const maxFileSize = 5 * 1024 * 1024; // 5MB per file

    for (const file of v) {
      if (!allowedTypes.includes(file.type) && !['zip', 'pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'].includes(file.name.split('.').pop()?.toLowerCase() || '')) {
        return `One or more files have an unsupported type. Allowed: ZIP, PDF, DOC, DOCX, JPG, JPEG, PNG.`;
      }
      if (file.size > maxFileSize) {
        return `One or more files exceed the ${maxFileSize / (1024 * 1024)}MB limit.`;
      }
    }
    return true;
  }
];


// --- API AVAILABILITY CHECK ---
const isApiAvailable = ref(false);
const isCheckingApi = ref(true);
let apiCheckInterval: number | undefined;

const pingApi = async (showLoading = false) => {
  if (showLoading) isCheckingApi.value = true;
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
    const response = await fetch('https://api.jali123456.win/register.php', {
      method: 'HEAD',
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    isApiAvailable.value = response.ok;
  } catch (e) {
    console.error("API ping failed:", e); // Log the actual error
    isApiAvailable.value = false;
  } finally {
    if (showLoading) isCheckingApi.value = false;
  }
};

onMounted(() => {
  pingApi(true); // Initial check with loading indicator
  apiCheckInterval = window.setInterval(() => {
    pingApi(false); // Subsequent checks without explicit loading, less intrusive
  }, 60000); // Check every minute
});

onUnmounted(() => {
  if (apiCheckInterval) clearInterval(apiCheckInterval);
});

// --- FORM SUBMISSION ---
const submitForm = async () => {
  console.log('submitForm called');
  console.log('form.value:', form.value);
  const { valid: formIsValid } = await (form.value as VForm).validate();
  console.log('formIsValid:', formIsValid);
  if (!formIsValid) {
    alert('Please correct the errors in the form.');
    return;
  }

  isSubmitting.value = true; // Start loading state

  try {
    // Set presentation_type to 'N/A' if not a presenter (consistent with backend logic)
    const presenterFeeTypes = [
      'Local Participant (Presenter)',
      'International Participant (Presenter)'
    ];
    if (!presenterFeeTypes.includes(formData.value.fee_type)) { // Changed to fee_type
      formData.value.presentation_type = 'N/A'; // Changed to presentation_type
      formData.value.presentation_title = ''; // Clear title if not presenter
    }

    // --- Prepare FormData for multipart/form-data upload ---
    const dataToSend = new FormData();

    // Append all text fields
    dataToSend.append('first_name', formData.value.first_name);
    dataToSend.append('last_name', formData.value.last_name);
    dataToSend.append('email', formData.value.email);
    dataToSend.append('phone_number', formData.value.phone_number);
    dataToSend.append('affiliation', formData.value.affiliation);
    dataToSend.append('country', formData.value.country);
    dataToSend.append('category', formData.value.category);
    dataToSend.append('fee_type', formData.value.fee_type);
    dataToSend.append('presentation_type', formData.value.presentation_type);
    dataToSend.append('excursion_networking', formData.value.excursion_networking);
    dataToSend.append('presentation_title', formData.value.presentation_title);
    dataToSend.append('special_requirements', formData.value.special_requirements);

    // Append files
    if (formData.value.uploaded_papers && formData.value.uploaded_papers.length > 0) {
      dataToSend.append('uploaded_papers', formData.value.uploaded_papers[0]); // Send as single file
    }
    if (formData.value.supporting_documents && formData.value.supporting_documents.length > 0) {
      formData.value.supporting_documents.forEach((file, index) => {
        dataToSend.append(`supporting_documents[${index}]`, file); // Send multiple files as an array
      });
    }

    // --- Send the request ---
    const response = await fetch('https://api.jali123456.win/register.php', {
      method: 'POST',
      // DO NOT set 'Content-Type': 'multipart/form-data' explicitly.
      // Fetch API will automatically set the correct boundary and Content-Type header
      // when you send a FormData object. Setting it manually can break the upload.
      body: dataToSend
    });

    const result = await response.json();
    if (response.ok && result.success) {
      alert('Registration submitted successfully! Check your email for confirmation.');

      // Reset form data and validation
      formData.value = {
        first_name: '',
        last_name: '',
        email: '',
        phone_number: '',
        affiliation: '',
        country: '',
        category: '',
        fee_type: '',
        presentation_type: '',
        excursion_networking: '',
        presentation_title: '',
        uploaded_papers: null,
        supporting_documents: [],
        special_requirements: ''
      };

      if (form.value) {
        form.value.reset();
        form.value.resetValidation(); // Clear validation errors
      }
    } else {
      // Backend should return a helpful message in result.message
      throw new Error(result.message || 'Registration failed due to an unknown error.');
    }
  } catch (error) {
    console.error('Error submitting registration:', error);
    alert('There was an error submitting your registration. ' + (error instanceof Error ? error.message : 'Please try again.'));
  } finally {
    isSubmitting.value = false; // End loading state
  }
};
</script>

<style scoped>
.v-table {
  width: 100%;
}
.form-disabled :deep(.v-field--disabled) {
  opacity: 0.6;
  background-color: #f5f5f5 !important;
}

.form-disabled :deep(.v-field--disabled .v-field__input) {
  color: #666 !important;
}
</style>